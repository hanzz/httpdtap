#! /usr/bin/env stap

/*
 * Summary: Shows requests sorted by time needed to finished them.
 * Description:
 * -> req_time [with_download]
 * -> with_download: count also the time needed by client to fully download
 *                   the response.
 *
 * Prints 10 slowest requests together with the time needed to handle them.
 * Also prints the requests grouped by URI together with avg/min/max time
 * per each URI.
 */

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 * Author: Jan Kaluza
 */

global pending_requests[2048]
global requests[2048]
global requests_uri[2048]
global st[512]
global sorted[512]

probe begin {
	printf("Gathering data. Use ctrl+c to stop this script and get the results.\n")
}

probe process("/usr/*bin/httpd").function("ap_process_async_request") {
    requests_uri[tid(), $r->connection] = user_string($r->unparsed_uri)
	pending_requests[tid(), $r->connection] = gettimeofday_us()
}

/* Version without "with_download" option */
%( $# == 1 %?

probe process("/usr/*bin/httpd").function("ap_process_request_after_handler") {
	if ([tid(), $r->connection] in pending_requests) {
		uri = user_string($r->unparsed_uri)
		now = gettimeofday_us()
		diff = now - pending_requests[tid(), $r->connection]
		delete pending_requests[tid(), $r->connection]
		delete requests_uri[tid(), $r->connection]
		requests[tid(), uri, $r->connection, now] = diff
		st[uri] <<< diff
	}
}

%)

/* Version with "with_download" option */
%( $# == 2 %?

probe process("/usr/*bin/httpd").function("ap_read_request") {
	if ([tid(), $conn] in pending_requests) {
		now = gettimeofday_us()
		uri = requests_uri[tid(), $conn]
		diff = now - pending_requests[tid(), $conn]
		delete pending_requests[tid(), $conn]
		delete requests_uri[tid(), $r->connection]
		requests[tid(), uri, $conn, now] = diff
		st[uri] <<< diff
	}
}

%)

probe end {
	i = 1
	printf("10 slowest requests:\n")
	foreach (v = [tid, uri, conn, now] in requests- limit 10) {
		printf("   %d. '%s': %d us\n", i, uri, v)
		i = i + 1
	}

	foreach (k in st) {
		sorted[k] = @avg(st[k])
	}

	i = 1
	printf("Grouped requests by URI:\n")
	foreach (v = [k] in sorted-) {
		printf("   %d. '%s': avg=%d us, min=%d us, max=%d us\n", i, k, @avg(st[k]), @min(st[k]), @max(st[k]))
		i = i + 1
	}
}
